kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Values.kafka.name }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "smart-home.appLabels" .Values.kafka | nindent 4 }}
data:
  init.sh: >-
    #!/bin/bash

    set -e

    set -x

    apt update && apt install -y jq

    cp /etc/kafka-configmap/log4j.properties /etc/kafka/


    KAFKA_BROKER_ID=${HOSTNAME##*-}

    SEDS=("s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/")

    LABELS="kafka-broker-id=$KAFKA_BROKER_ID"

    ANNOTATIONS=""


    hash kubectl 2>/dev/null || {
      SEDS+=("s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/")
    } && {
      ZONE=$(kubectl get no -o json | jq -r '.items[] | select(.spec.unschedulable!=true) | [.metadata.labels."failure-domain.beta.kubernetes.io/zone"]' | sed 's/[][]//g' | sed -r '/^\s*$/d')
      if [ "x$ZONE" == "null" ]; then
        SEDS+=("s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/")
      else
        SEDS+=("s/#init#broker.rack=#init#/broker.rack=$ZONE/")
        LABELS="$LABELS kafka-broker-rack=$ZONE"
      fi

      [ -z "$ADVERTISE_ADDR" ] && echo "ADVERTISE_ADDR is empty, will advertise detected DNS name"
      OUTSIDE_HOST=$(kubectl get node "$NODE_NAME" -o jsonpath='{.status.addresses[?(@.type=="InternalIP")].address}')
      OUTSIDE_PORT=$((32400 + ${KAFKA_BROKER_ID}))
      SEDS+=("s|#init#advertised.listeners=PLAINTEXT://#init#|advertised.listeners=PLAINTEXT://${ADVERTISE_ADDR}:9092,OUTSIDE://${OUTSIDE_HOST}:${OUTSIDE_PORT}|")
      ANNOTATIONS="$ANNOTATIONS kafka-listener-outside-host=$OUTSIDE_HOST kafka-listener-outside-port=$OUTSIDE_PORT"

      if [ ! -z "$LABELS" ]; then
        kubectl -n $POD_NAMESPACE label pod $POD_NAME $LABELS || echo "Failed to label $POD_NAMESPACE.$POD_NAME - RBAC issue?"
      fi
      if [ ! -z "$ANNOTATIONS" ]; then
        kubectl -n $POD_NAMESPACE annotate pod $POD_NAME $ANNOTATIONS || echo "Failed to annotate $POD_NAMESPACE.$POD_NAME - RBAC issue?"
      fi
    }

    printf '%s\n' "${SEDS[@]}" | sed -f - /etc/kafka-configmap/server.properties
    > /etc/kafka/server.properties.tmp

    [ $? -eq 0 ] && mv /etc/kafka/server.properties.tmp
    /etc/kafka/server.properties

    ln -s /etc/kafka/server.properties /etc/kafka/server.properties.$POD_NAME
  log4j.properties: >-
    log4j.rootLogger=INFO, stdout


    log4j.appender.stdout=org.apache.log4j.ConsoleAppender

    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n


    log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH

    log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log

    log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout

    log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n


    log4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH

    log4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log

    log4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout

    log4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m
    (%c)%n


    log4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH

    log4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log

    log4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout

    log4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n


    log4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH

    log4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log

    log4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout

    log4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n


    log4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH

    log4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log

    log4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout

    log4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n


    log4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH

    log4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log

    log4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout

    log4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n


    # Change the two lines below to adjust ZK client logging

    log4j.logger.org.I0Itec.zkclient.ZkClient=INFO

    log4j.logger.org.apache.zookeeper=INFO


    # Change the two lines below to adjust the general broker logging level
    (output to server.log and stdout)

    log4j.logger.kafka=INFO

    log4j.logger.org.apache.kafka=INFO


    # Change to DEBUG or TRACE to enable request logging

    log4j.logger.kafka.request.logger=WARN, requestAppender

    log4j.additivity.kafka.request.logger=false


    log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender

    log4j.additivity.kafka.network.RequestChannel$=false


    log4j.logger.kafka.controller=TRACE, controllerAppender

    log4j.additivity.kafka.controller=false


    log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender

    log4j.additivity.kafka.log.LogCleaner=false


    log4j.logger.state.change.logger=TRACE, stateChangeAppender

    log4j.additivity.state.change.logger=false


    log4j.logger.kafka.authorizer.logger=WARN, authorizerAppender

    log4j.additivity.kafka.authorizer.logger=false
  server.properties: |-
    delete.topic.enable=true
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    log.dirs=/tmp/kafka-logs
    num.partitions=1
    num.recovery.threads.per.data.dir=1
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
    transaction.state.log.min.isr=1
    log.retention.hours=168
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
    zookeeper.connect=zookeeper-service:2181
    zookeeper.connection.timeout.ms=6000
    group.initial.rebalance.delay.ms=0